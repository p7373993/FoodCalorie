# Generated by Django 5.2.4 on 2025-07-24 05:28

import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Badge',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, unique=True)),
                ('description', models.TextField()),
                ('icon', models.CharField(default='üèÖ', max_length=50)),
            ],
            options={
                'db_table': 'badges',
            },
        ),
        migrations.CreateModel(
            name='Challenge',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=200)),
                ('description', models.TextField()),
                ('type', models.CharField(choices=[('CALORIE_LIMIT', 'ÏπºÎ°úÎ¶¨ Ï†úÌïú'), ('PROTEIN_MINIMUM', 'ÏµúÏÜå Îã®Î∞±Ïßà')], max_length=20)),
                ('goal', models.IntegerField()),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('creator', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='created_challenges', to=settings.AUTH_USER_MODEL)),
                ('participants', models.ManyToManyField(blank=True, related_name='joined_challenges', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'challenges',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='GamificationProfile',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('points', models.IntegerField(default=0)),
                ('badges', models.ManyToManyField(blank=True, to='chegam.badge')),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='gamification', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'gamification_profiles',
            },
        ),
        migrations.CreateModel(
            name='Meal',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('image_url', models.URLField(max_length=500)),
                ('calories', models.IntegerField()),
                ('timestamp', models.DateTimeField(auto_now_add=True)),
                ('analysis_data', models.JSONField(blank=True, null=True)),
                ('ml_task_id', models.CharField(blank=True, max_length=100)),
                ('estimated_mass', models.FloatField(blank=True, null=True)),
                ('confidence_score', models.FloatField(blank=True, null=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='meals', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'meals',
                'ordering': ['-timestamp'],
            },
        ),
        migrations.CreateModel(
            name='UserProfile',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'user_profiles',
            },
        ),
        migrations.CreateModel(
            name='WeightEntry',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('weight', models.FloatField()),
                ('timestamp', models.DateTimeField(auto_now_add=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='weight_entries', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'weight_entries',
                'ordering': ['-timestamp'],
            },
        ),
    ]
