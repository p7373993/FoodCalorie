"""
Django settings for config project.

Generated by 'django-admin startproject' using Django 5.2.4.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""

from pathlib import Path

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-xn4utqk-h$t1qgswtvo3*lqj4e8$*a&m-q2z5$6sst1$)2b^t5'

# Gemini API Key (팀원 설정 추가)
GEMINI_API_KEY = 'AIzaSyBHk7IcID52trC-d2rZQzFrpPKH-1sCjKo'  # 실제 Gemini API 키

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = ['localhost', '127.0.0.1', 'testserver']


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'rest_framework',
    'corsheaders',
    'channels',  # WebSocket 지원을 위해 활성화
    'accounts',  # 사용자 인증 시스템
    'api_integrated.apps.ApiIntegratedConfig',  # 메인 API 앱
    'mlserver',  # MLServer 연동
    # 'chegam',  # 체감 앱 (일시 비활성화 - UserProfile 충돌)
    'challenges.apps.ChallengesConfig',  # 챌린지 시스템
    'calender.apps.CalenderConfig',  # 캘린더 앱
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'corsheaders.middleware.CorsMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',  # CSRF 활성화
    'accounts.middleware.SessionExpiryMiddleware',  # 세션 만료 처리
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'accounts.middleware.AuthenticationErrorMiddleware',  # 인증 에러 처리
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'config.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'config.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.2/ref/settings/#databases

# 개발 환경 설정
import os
from pathlib import Path

# 환경 변수로 DB 설정 관리
DB_HOST = os.environ.get('DB_HOST', 'localhost')
DB_PORT = os.environ.get('DB_PORT', '8000')

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
    }
}

# 중앙 집중식 DB 사용 시 (DB 서버 컴퓨터에서만)
if DB_HOST != 'localhost':
    DATABASES = {
        'default': {
            'ENGINE': 'django.db.backends.sqlite3',
            'NAME': BASE_DIR / 'shared_db.sqlite3',
        }
    }


# 세션 설정
SESSION_COOKIE_AGE = 1209600  # 2주 (초 단위)
SESSION_COOKIE_SECURE = False  # 개발환경에서는 False, 프로덕션에서는 True
SESSION_COOKIE_HTTPONLY = True  # XSS 공격 방지
SESSION_COOKIE_SAMESITE = 'Lax'  # CSRF 공격 완화
SESSION_SAVE_EVERY_REQUEST = True  # 매 요청마다 세션 갱신
SESSION_EXPIRE_AT_BROWSER_CLOSE = False  # 브라우저 종료 시 세션 유지

# 프로덕션 환경에서는 보안 쿠키 사용
if not DEBUG:
    SESSION_COOKIE_SECURE = True
    CSRF_COOKIE_SECURE = True


# Password validation
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'Asia/Seoul'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.2/howto/static-files/

STATIC_URL = 'static/'
STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')

# Default primary key field type
# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# REST Framework 설정
REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': [
        'rest_framework.authentication.SessionAuthentication',  # 세션 기반 인증만 사용
    ],
    'DEFAULT_PERMISSION_CLASSES': [
        'rest_framework.permissions.IsAuthenticated',
    ],
    'DEFAULT_PAGINATION_CLASS': 'rest_framework.pagination.PageNumberPagination',
    'PAGE_SIZE': 20,
    'DEFAULT_RENDERER_CLASSES': [
        'rest_framework.renderers.JSONRenderer',
    ],
    'DEFAULT_PARSER_CLASSES': [
        'rest_framework.parsers.JSONParser',
        'rest_framework.parsers.FormParser',
        'rest_framework.parsers.MultiPartParser',
    ],
}



# Frontend URL (비밀번호 재설정 등에 사용)
FRONTEND_URL = 'http://localhost:3000'

# 이메일 설정 (개발 환경)
EMAIL_BACKEND = 'django.core.mail.backends.console.EmailBackend'
DEFAULT_FROM_EMAIL = 'noreply@foodcalorie.com'

# CORS 설정
CORS_ALLOWED_ORIGINS = [
    "http://localhost:3000",
    "http://127.0.0.1:3000",
    "http://localhost:3001",
    "http://127.0.0.1:3001",
    "http://localhost:3002",
    "http://127.0.0.1:3002",
]

CORS_ALLOW_CREDENTIALS = True

# CSRF 설정
CSRF_TRUSTED_ORIGINS = [
    "http://localhost:3000",
    "http://127.0.0.1:3000",
    "http://localhost:3001",
    "http://127.0.0.1:3001",
    "http://localhost:3002",
    "http://127.0.0.1:3002",
]

# CSRF 쿠키 설정
CSRF_COOKIE_HTTPONLY = False  # JavaScript에서 접근 가능하도록 설정
CSRF_COOKIE_SAMESITE = 'Lax'
CSRF_USE_SESSIONS = False  # 쿠키 기반 CSRF 토큰 사용
CSRF_COOKIE_NAME = 'csrftoken'  # 표준 CSRF 쿠키 이름

# Channels 설정
ASGI_APPLICATION = 'config.asgi.application'

# Django 개발 서버에서 웹소켓 활성화
CHANNELS_WSGI_ALLOW_ASYNC_TO_SYNC = True
# Channel Layers 설정 (Redis 사용)
CHANNEL_LAYERS = {
    'default': {
        'BACKEND': 'channels_redis.core.RedisChannelLayer',
        'CONFIG': {
            "hosts": [('127.0.0.1', 6379)],
        },
    },
}

# Celery 설정
CELERY_BROKER_URL = 'redis://localhost:6379/0'
CELERY_RESULT_BACKEND = 'redis://localhost:6379/0'
CELERY_ACCEPT_CONTENT = ['json']
CELERY_TASK_SERIALIZER = 'json'
CELERY_RESULT_SERIALIZER = 'json'

# Celery 워커 설정
import platform

# Windows에서만 solo 풀 사용 (권한 오류 방지)
if platform.system() == 'Windows':
    CELERY_WORKER_POOL = 'solo'
    CELERY_WORKER_CONCURRENCY = 1
else:
    # Linux/Mac에서는 기본 풀 사용 (더 나은 성능)
    CELERY_WORKER_CONCURRENCY = 4  # CPU 코어 수에 따라 조정

# ML 서버 설정
ML_SERVER_URL = 'http://localhost:8001'

# Gemini API 키 (팀원 기능용)
GEMINI_API_KEY = 'AIzaSyBHk7IcID52trC-d2rZQzFrpPKH-1sCjKo'  # 실제 Gemini API 키

# Media files
MEDIA_URL = '/media/'
MEDIA_ROOT = os.path.join(BASE_DIR, 'media')

# Email settings (개발 환경용)
EMAIL_BACKEND = 'django.core.mail.backends.console.EmailBackend'  # 개발용 (콘솔 출력)
DEFAULT_FROM_EMAIL = 'noreply@foodcalorie.com'

# 프로덕션 환경에서는 실제 SMTP 설정 사용
if not DEBUG:
    EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'
    EMAIL_HOST = os.environ.get('EMAIL_HOST', 'smtp.gmail.com')
    EMAIL_PORT = int(os.environ.get('EMAIL_PORT', '587'))
    EMAIL_USE_TLS = True
    EMAIL_HOST_USER = os.environ.get('EMAIL_HOST_USER')
    EMAIL_HOST_PASSWORD = os.environ.get('EMAIL_HOST_PASSWORD')

# Frontend URL (비밀번호 재설정 링크용)
FRONTEND_URL = os.environ.get('FRONTEND_URL', 'http://localhost:3000')


