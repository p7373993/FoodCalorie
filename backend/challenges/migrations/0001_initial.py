# Generated by Django 5.2.4 on 2025-07-24 08:03

import django.core.validators
import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):
    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name="ChallengeBadge",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(max_length=100, unique=True)),
                ("description", models.TextField()),
                ("icon", models.CharField(max_length=50)),
                (
                    "condition_type",
                    models.CharField(
                        choices=[
                            ("streak", "연속 성공"),
                            ("completion", "챌린지 완료"),
                            ("total_success", "총 성공 일수"),
                            ("perfect_week", "완벽한 주"),
                        ],
                        max_length=50,
                    ),
                ),
                (
                    "condition_value",
                    models.IntegerField(
                        validators=[django.core.validators.MinValueValidator(1)]
                    ),
                ),
                ("is_active", models.BooleanField(default=True)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
            ],
            options={
                "db_table": "challenge_badges",
                "ordering": ["condition_value"],
            },
        ),
        migrations.CreateModel(
            name="ChallengeRoom",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(max_length=100, unique=True)),
                (
                    "target_calorie",
                    models.IntegerField(
                        validators=[
                            django.core.validators.MinValueValidator(1000),
                            django.core.validators.MaxValueValidator(5000),
                        ]
                    ),
                ),
                (
                    "tolerance",
                    models.IntegerField(
                        default=50,
                        validators=[
                            django.core.validators.MinValueValidator(0),
                            django.core.validators.MaxValueValidator(200),
                        ],
                    ),
                ),
                ("description", models.TextField()),
                ("is_active", models.BooleanField(default=True)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                (
                    "dummy_users_count",
                    models.IntegerField(
                        default=0,
                        validators=[django.core.validators.MinValueValidator(0)],
                    ),
                ),
            ],
            options={
                "db_table": "challenge_rooms",
                "ordering": ["target_calorie"],
            },
        ),
        migrations.CreateModel(
            name="UserChallenge",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "user_height",
                    models.FloatField(
                        validators=[
                            django.core.validators.MinValueValidator(100),
                            django.core.validators.MaxValueValidator(250),
                        ]
                    ),
                ),
                (
                    "user_weight",
                    models.FloatField(
                        validators=[
                            django.core.validators.MinValueValidator(30),
                            django.core.validators.MaxValueValidator(300),
                        ]
                    ),
                ),
                (
                    "user_target_weight",
                    models.FloatField(
                        validators=[
                            django.core.validators.MinValueValidator(30),
                            django.core.validators.MaxValueValidator(300),
                        ]
                    ),
                ),
                (
                    "user_challenge_duration_days",
                    models.IntegerField(
                        validators=[
                            django.core.validators.MinValueValidator(7),
                            django.core.validators.MaxValueValidator(365),
                        ]
                    ),
                ),
                (
                    "user_weekly_cheat_limit",
                    models.IntegerField(
                        choices=[(0, "0회"), (1, "1회"), (2, "2회"), (3, "3회")], default=1
                    ),
                ),
                (
                    "current_streak_days",
                    models.IntegerField(
                        default=0,
                        validators=[django.core.validators.MinValueValidator(0)],
                    ),
                ),
                (
                    "max_streak_days",
                    models.IntegerField(
                        default=0,
                        validators=[django.core.validators.MinValueValidator(0)],
                    ),
                ),
                (
                    "remaining_duration_days",
                    models.IntegerField(
                        validators=[django.core.validators.MinValueValidator(0)]
                    ),
                ),
                (
                    "current_weekly_cheat_count",
                    models.IntegerField(
                        default=0,
                        validators=[django.core.validators.MinValueValidator(0)],
                    ),
                ),
                (
                    "total_success_days",
                    models.IntegerField(
                        default=0,
                        validators=[django.core.validators.MinValueValidator(0)],
                    ),
                ),
                (
                    "total_failure_days",
                    models.IntegerField(
                        default=0,
                        validators=[django.core.validators.MinValueValidator(0)],
                    ),
                ),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("active", "진행중"),
                            ("inactive", "비활성"),
                            ("completed", "완료"),
                        ],
                        default="active",
                        max_length=20,
                    ),
                ),
                ("challenge_start_date", models.DateField(auto_now_add=True)),
                ("last_activity_date", models.DateField(blank=True, null=True)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "room",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="participants",
                        to="challenges.challengeroom",
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="challenges",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "db_table": "user_challenges",
                "ordering": ["-current_streak_days", "-challenge_start_date"],
                "unique_together": {("user", "room")},
            },
        ),
        migrations.CreateModel(
            name="DailyChallengeRecord",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("date", models.DateField()),
                (
                    "total_calories",
                    models.FloatField(
                        validators=[django.core.validators.MinValueValidator(0)]
                    ),
                ),
                (
                    "target_calories",
                    models.FloatField(
                        validators=[django.core.validators.MinValueValidator(0)]
                    ),
                ),
                ("is_success", models.BooleanField()),
                ("is_cheat_day", models.BooleanField(default=False)),
                (
                    "meal_count",
                    models.IntegerField(
                        default=0,
                        validators=[django.core.validators.MinValueValidator(0)],
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "user_challenge",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="daily_records",
                        to="challenges.userchallenge",
                    ),
                ),
            ],
            options={
                "db_table": "daily_challenge_records",
                "ordering": ["-date"],
                "unique_together": {("user_challenge", "date")},
            },
        ),
        migrations.CreateModel(
            name="CheatDayRequest",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("date", models.DateField()),
                ("requested_at", models.DateTimeField(auto_now_add=True)),
                ("is_approved", models.BooleanField(default=False)),
                ("reason", models.TextField(blank=True, null=True)),
                (
                    "user_challenge",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="cheat_requests",
                        to="challenges.userchallenge",
                    ),
                ),
            ],
            options={
                "db_table": "cheat_day_requests",
                "ordering": ["-requested_at"],
                "unique_together": {("user_challenge", "date")},
            },
        ),
        migrations.CreateModel(
            name="UserChallengeBadge",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("earned_at", models.DateTimeField(auto_now_add=True)),
                (
                    "badge",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="earned_by_users",
                        to="challenges.challengebadge",
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="challenge_badges",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "user_challenge",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="challenges.userchallenge",
                    ),
                ),
            ],
            options={
                "db_table": "user_challenge_badges",
                "ordering": ["-earned_at"],
                "unique_together": {("user", "badge")},
            },
        ),
    ]
